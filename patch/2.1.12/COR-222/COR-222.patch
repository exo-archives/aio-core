Index: component/document/src/main/java/org/exoplatform/services/document/impl/BaseDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/BaseDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/BaseDocumentReader.java	(working copy)
@@ -19,10 +19,39 @@
 import org.exoplatform.container.component.BaseComponentPlugin;
 import org.exoplatform.services.document.DocumentReader;
 
+import java.io.BufferedInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
 /**
  * Created by The eXo Platform SAS Author : Phung Hai Nam phunghainam@gmail.com
  * Oct 20, 2005
  */
 abstract public class BaseDocumentReader extends BaseComponentPlugin implements DocumentReader {
 
+  /**
+   * Validate that stream is not empty and return BufferedInputStream
+   * 
+   * @param is InputeStream
+   * @return BufferedInputStram that covers original IS or null if IS is empty.
+   * @throws IOException
+   */
+  protected BufferedInputStream validateInputStream(InputStream is) throws IOException {
+    if (is == null) {
+      throw new NullPointerException("InputStream is null.");
+    }
+
+    BufferedInputStream bis = new BufferedInputStream(is, 128);
+    bis.mark(0);
+    // check that there is some data
+    if (bis.read(new byte[4]) < 4) {
+      try {
+        bis.close();
+      } catch (IOException e) {
+      }
+      return null;
+    }
+    bis.reset();
+    return bis;
+  }
 }
Index: component/document/src/main/java/org/exoplatform/services/document/impl/HTMLDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/HTMLDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/HTMLDocumentReader.java	(working copy)
@@ -16,6 +16,12 @@
  */
 package org.exoplatform.services.document.impl;
 
+import org.exoplatform.container.xml.InitParams;
+import org.htmlparser.Parser;
+import org.htmlparser.beans.StringBean;
+import org.htmlparser.util.ParserException;
+
+import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -24,12 +30,6 @@
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
-import org.htmlparser.Parser;
-import org.htmlparser.beans.StringBean;
-import org.htmlparser.util.ParserException;
-
-import org.exoplatform.container.xml.InitParams;
-
 /**
  * Created by The eXo Platform SAS A parser of HTML files.
  * 
@@ -66,12 +66,17 @@
    * @return The string only with text from file content.
    */
   public String getContentAsText(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return "";
+    }
+
     String refined_text = new String();
     try {
       byte[] buffer = new byte[2048];
       int len;
       ByteArrayOutputStream bos = new ByteArrayOutputStream();
-      while ((len = is.read(buffer)) > 0)
+      while ((len = bis.read(buffer)) > 0)
         bos.write(buffer, 0, len);
       bos.close();
 
Index: component/document/src/main/java/org/exoplatform/services/document/impl/MSExcelDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/MSExcelDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/MSExcelDocumentReader.java	(working copy)
@@ -16,11 +16,6 @@
  */
 package org.exoplatform.services.document.impl;
 
-import java.io.InputStream;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Properties;
-
 import org.apache.poi.hssf.usermodel.HSSFCell;
 import org.apache.poi.hssf.usermodel.HSSFCellStyle;
 import org.apache.poi.hssf.usermodel.HSSFDateUtil;
@@ -28,6 +23,12 @@
 import org.apache.poi.hssf.usermodel.HSSFSheet;
 import org.apache.poi.hssf.usermodel.HSSFWorkbook;
 
+import java.io.BufferedInputStream;
+import java.io.InputStream;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Properties;
+
 /**
  * Created by The eXo Platform SAS A parser of Microsoft Excel files.
  * 
@@ -56,10 +57,15 @@
    * @throws Exception
    */
   public String getContentAsText(InputStream is) throws Exception {
-    
+
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return "";
+    }
+
     StringBuilder builder = new StringBuilder("");
     try {
-      HSSFWorkbook wb = new HSSFWorkbook(is);
+      HSSFWorkbook wb = new HSSFWorkbook(bis);
       for (int sheetNum = 0; sheetNum < wb.getNumberOfSheets(); sheetNum++) {
         HSSFSheet sheet = wb.getSheetAt(sheetNum);
         if (sheet != null) {
@@ -121,8 +127,13 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return new Properties();
+    }
+
     POIPropertiesReader reader = new POIPropertiesReader();
-    reader.readDCProperties(is);
+    reader.readDCProperties(bis);
     return reader.getProperties();
   }
 
Index: component/document/src/main/java/org/exoplatform/services/document/impl/MSOutlookDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/MSOutlookDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/MSOutlookDocumentReader.java	(working copy)
@@ -17,12 +17,13 @@
 
 package org.exoplatform.services.document.impl;
 
+import org.apache.poi.hsmf.MAPIMessage;
+import org.apache.poi.hsmf.exceptions.ChunkNotFoundException;
+
+import java.io.BufferedInputStream;
 import java.io.InputStream;
 import java.util.Properties;
 
-import org.apache.poi.hsmf.MAPIMessage;
-import org.apache.poi.hsmf.exceptions.ChunkNotFoundException;
-
 /**
  * Created by The eXo Platform SAS Author : Sergey Karpenko
  * <sergey.karpenko@exoplatform.com.ua>
@@ -48,8 +49,13 @@
   }
 
   public String getContentAsText(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return "";
+    }
+
     try {
-      MAPIMessage message = new MAPIMessage(is);
+      MAPIMessage message = new MAPIMessage(bis);
       StringBuffer buffer = new StringBuffer();
       try {
         buffer.append(message.getDisplayFrom()).append('\n');
@@ -72,7 +78,7 @@
       // e.printStackTrace();
       return "";
     } finally {
-      is.close();
+      bis.close();
     }
   }
 
@@ -82,7 +88,7 @@
   }
 
   public Properties getProperties(InputStream is) throws Exception {
-    return null;
+    return new Properties();
   }
 
 }
Index: component/document/src/main/java/org/exoplatform/services/document/impl/MSWordDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/MSWordDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/MSWordDocumentReader.java	(working copy)
@@ -16,13 +16,14 @@
  */
 package org.exoplatform.services.document.impl;
 
+import org.apache.poi.hwpf.HWPFDocument;
+import org.apache.poi.hwpf.usermodel.Range;
+
+import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Properties;
 
-import org.apache.poi.hwpf.HWPFDocument;
-import org.apache.poi.hwpf.usermodel.Range;
-
 /**
  * Created by The eXo Platform SAS A parser of Microsoft Word files.
  * 
@@ -49,9 +50,14 @@
    * @throws Exception
    */
   public String getContentAsText(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return "";
+    }
+
     String text = "";
     try {
-      HWPFDocument doc = new HWPFDocument(is);
+      HWPFDocument doc = new HWPFDocument(bis);
       // WordExtractor extr = new WordExtractor(doc);
 
       Range range = doc.getRange();
@@ -73,8 +79,13 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return new Properties();
+    }
+
     POIPropertiesReader reader = new POIPropertiesReader();
-    reader.readDCProperties(is);
+    reader.readDCProperties(bis);
     return reader.getProperties();
   }
 
Index: component/document/src/main/java/org/exoplatform/services/document/impl/OpenOfficeDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/OpenOfficeDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/OpenOfficeDocumentReader.java	(working copy)
@@ -17,6 +17,15 @@
 
 package org.exoplatform.services.document.impl;
 
+import org.exoplatform.commons.utils.QName;
+import org.exoplatform.services.document.DCMetaData;
+import org.xml.sax.Attributes;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLReader;
+import org.xml.sax.helpers.DefaultHandler;
+
+import java.io.BufferedInputStream;
 import java.io.InputStream;
 import java.util.Properties;
 import java.util.zip.ZipEntry;
@@ -25,15 +34,6 @@
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 
-import org.xml.sax.Attributes;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
-import org.xml.sax.helpers.DefaultHandler;
-
-import org.exoplatform.commons.utils.QName;
-import org.exoplatform.services.document.DCMetaData;
-
 /**
  * Created by The eXo Platform SAS .
  * 
@@ -62,6 +62,11 @@
    * io.InputStream)
    */
   public String getContentAsText(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return "";
+    }
+
     try {
       SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
       saxParserFactory.setValidating(false);
@@ -70,7 +75,7 @@
       xmlReader.setFeature("http://xml.org/sax/features/validation", false);
       xmlReader.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
 
-      ZipInputStream zis = new ZipInputStream(is);
+      ZipInputStream zis = new ZipInputStream(bis);
       ZipEntry ze = zis.getNextEntry();
       while (!ze.getName().equals("content.xml")) {
         ze = zis.getNextEntry();
@@ -90,7 +95,7 @@
       // } catch (SAXException e) {
       // return "";
     } finally {
-      is.close();
+      bis.close();
     }
   }
 
@@ -106,6 +111,11 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return new Properties();
+    }
+
     try {
       SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
       saxParserFactory.setValidating(false);
@@ -114,7 +124,7 @@
       xmlReader.setFeature("http://xml.org/sax/features/validation", false);
       xmlReader.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
 
-      ZipInputStream zis = new ZipInputStream(is);
+      ZipInputStream zis = new ZipInputStream(bis);
       ZipEntry ze = zis.getNextEntry();
       while (!ze.getName().equals("meta.xml")) {
         ze = zis.getNextEntry();
Index: component/document/src/main/java/org/exoplatform/services/document/impl/PDFDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/PDFDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/PDFDocumentReader.java	(working copy)
@@ -16,6 +16,7 @@
  */
 package org.exoplatform.services.document.impl;
 
+import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.InputStream;
 import java.io.StringWriter;
@@ -69,7 +70,13 @@
    * @throws Exception
    */
   public String getContentAsText(InputStream is) throws Exception {
-    PDDocument pdDocument = PDDocument.load(is);
+
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return "";
+    }
+    
+    PDDocument pdDocument = PDDocument.load(bis);
     StringWriter sw = new StringWriter();
     try {
       PDFTextStripper stripper = new PDFTextStripper();
@@ -96,10 +103,14 @@
    */
   public Properties getProperties(InputStream is) throws Exception {
 
+    BufferedInputStream bis = validateInputStream(is);
+    if(bis == null){
+      return new Properties();
+    }
+    
     Properties props = null;
+    PdfReader reader = new PdfReader(bis, "".getBytes());
 
-    PdfReader reader = new PdfReader(is, "".getBytes());
-
     // Read the file metadata
     byte[] metadata = reader.getMetadata();
 
Index: component/document/src/main/java/org/exoplatform/services/document/impl/PPTDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/PPTDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/PPTDocumentReader.java	(working copy)
@@ -16,11 +16,12 @@
  */
 package org.exoplatform.services.document.impl;
 
+import org.apache.poi.hslf.extractor.PowerPointExtractor;
+
+import java.io.BufferedInputStream;
 import java.io.InputStream;
 import java.util.Properties;
 
-import org.apache.poi.hslf.extractor.PowerPointExtractor;
-
 /**
  * Created by The eXo Platform SAS A parser of Microsoft PowerPoint files.
  * Parses the files with application/powerpoint mime type.
@@ -48,7 +49,12 @@
    * @throws Exception
    */
   public String getContentAsText(InputStream is) throws Exception {
-    PowerPointExtractor ppe = new PowerPointExtractor(is);
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return "";
+    }
+
+    PowerPointExtractor ppe = new PowerPointExtractor(bis);
     return ppe.getText(true, true);
   }
 
@@ -64,6 +70,11 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return new Properties();
+    }
+
     POIPropertiesReader reader = new POIPropertiesReader();
     reader.readDCProperties(is);
     return reader.getProperties();
Index: component/document/src/main/java/org/exoplatform/services/document/impl/XMLDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/XMLDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/XMLDocumentReader.java	(working copy)
@@ -16,6 +16,7 @@
  */
 package org.exoplatform.services.document.impl;
 
+import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
 import java.util.Properties;
@@ -54,10 +55,15 @@
    * @return The string only with text from file content.
    */
   public String getContentAsText(InputStream is) throws Exception {
+    BufferedInputStream bis = validateInputStream(is);
+    if (bis == null) {
+      return "";
+    }
+
     byte[] buffer = new byte[2048];
     int len;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
-    while ((len = is.read(buffer)) > 0)
+    while ((len = bis.read(buffer)) > 0)
       bos.write(buffer, 0, len);
     bos.close();
     String xml = new String(bos.toByteArray());
