Index: component/document/pom.xml
===================================================================
--- component/document/pom.xml	(revision 65754)
+++ component/document/pom.xml	(working copy)
@@ -1,130 +1,136 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-
-    Copyright (C) 2003-2010 eXo Platform SAS.
-
-    This program is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Affero General Public License
-    as published by the Free Software Foundation; either version 3
-    of the License, or (at your option) any later version.
-
-    This program is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-    GNU General Public License for more details.
-
-    You should have received a copy of the GNU General Public License
-    along with this program; if not, see <http://www.gnu.org/licenses />.
-
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <parent>
-    <groupId>org.exoplatform.core</groupId>
-    <artifactId>core-component</artifactId>
-    <version>2.1.12-SNAPSHOT</version>
-  </parent>
-  <artifactId>exo.core.component.document</artifactId>
-  <packaging>jar</packaging>
-  <name>eXo Core demo service Impl</name>
-  <description>eXo demo service Impl</description>
-  <dependencies>
-    <dependency>
-      <groupId>org.exoplatform.kernel</groupId>
-      <artifactId>exo.kernel.component.common</artifactId>
-      <version>${org.exoplatform.kernel.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.exoplatform.kernel</groupId>
-      <artifactId>exo.kernel.container</artifactId>
-      <version>${org.exoplatform.kernel.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.exoplatform.kernel</groupId>
-      <artifactId>exo.kernel.commons</artifactId>
-      <version>${org.exoplatform.kernel.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.1</version>
-    </dependency>
-    <dependency>
-      <groupId>commons-logging</groupId>
-      <artifactId>commons-logging</artifactId>
-      <version>1.0.4</version>
-    </dependency>
-    <dependency>
-      <groupId>org.exoplatform.tool</groupId>
-      <artifactId>exo.tool.framework.junit</artifactId>
-      <version>1.0.0</version>
-    </dependency>
-    <dependency>
-      <groupId>pdfbox</groupId>
-      <artifactId>pdfbox</artifactId>
-      <version>0.7.2</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.lowagie</groupId>
-      <artifactId>itext</artifactId>
-      <version>2.1.0</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>html-parser</groupId>
-      <artifactId>html-parser</artifactId>
-      <version>1.6</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.poi</groupId>
-      <artifactId>poi</artifactId>
-      <!--version>3.0-FINAL</version-->
-      <version>3.0.2-FINAL</version>
-      <scope>compile</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.apache.poi</groupId>
-      <artifactId>poi-scratchpad</artifactId>
-      <version>3.0.2-FINAL</version>
-      <scope>compile</scope>
-    </dependency>
-  </dependencies>
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <configuration>
-         <excludes>
-           <!-- JCR-1398 Big XLS document hangs document reader -->
-           <exclude>**/TestBigXLSDocumentReader.java</exclude>
-         </excludes>
-        </configuration>
-      </plugin>
-    </plugins>
-    <testResources>
-      <testResource>
-        <directory>src/test/resources</directory>
-        <includes>
-          <include>**/*.properties</include>
-          <include>**/*.xml</include>
-          <include>**/*.drl</include>
-          <include>**/*.vm</include>
-          <include>**/*.doc</include>
-          <include>**/*.dot</include>
-          <include>**/*.xls</include>
-          <include>**/*.ppt</include>
-          <include>**/*.txt</include>
-          <include>**/*.tiff</include>
-          <include>**/*.pdf</include>
-          <include>**/*.odt</include>
-          <include>**/*.html</include>
-          <include>**/*.msg</include>
-          <include>**/*.pst</include>
-        </includes>
-      </testResource>
-    </testResources>
-  </build>
-</project>
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+
+    Copyright (C) 2003-2010 eXo Platform SAS.
+
+    This program is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Affero General Public License
+    as published by the Free Software Foundation; either version 3
+    of the License, or (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, see <http://www.gnu.org/licenses />.
+
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.exoplatform.core</groupId>
+    <artifactId>core-component</artifactId>
+    <version>2.1.12-SNAPSHOT</version>
+  </parent>
+  <artifactId>exo.core.component.document</artifactId>
+  <packaging>jar</packaging>
+  <name>eXo Core demo service Impl</name>
+  <description>eXo demo service Impl</description>
+  <dependencies>
+    <dependency>
+      <groupId>org.exoplatform.kernel</groupId>
+      <artifactId>exo.kernel.component.common</artifactId>
+      <version>${org.exoplatform.kernel.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.kernel</groupId>
+      <artifactId>exo.kernel.container</artifactId>
+      <version>${org.exoplatform.kernel.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.kernel</groupId>
+      <artifactId>exo.kernel.commons</artifactId>
+      <version>${org.exoplatform.kernel.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.1</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-logging</groupId>
+      <artifactId>commons-logging</artifactId>
+      <version>1.0.4</version>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.tool</groupId>
+      <artifactId>exo.tool.framework.junit</artifactId>
+      <version>1.0.0</version>
+    </dependency>
+    <dependency>
+      <groupId>pdfbox</groupId>
+      <artifactId>pdfbox</artifactId>
+      <version>0.7.2</version>
+      <scope>compile</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.jempbox</groupId>
+      <artifactId>jempbox</artifactId>
+      <version>0.2.0</version>
+      <scope>compile</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.lowagie</groupId>
+      <artifactId>itext</artifactId>
+      <version>2.1.0</version>
+      <scope>compile</scope>
+    </dependency>
+    <dependency>
+      <groupId>html-parser</groupId>
+      <artifactId>html-parser</artifactId>
+      <version>1.6</version>
+      <scope>compile</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.poi</groupId>
+      <artifactId>poi</artifactId>
+      <!--version>3.0-FINAL</version-->
+      <version>3.0.2-FINAL</version>
+      <scope>compile</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.poi</groupId>
+      <artifactId>poi-scratchpad</artifactId>
+      <version>3.0.2-FINAL</version>
+      <scope>compile</scope>
+    </dependency>
+  </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-surefire-plugin</artifactId>
+        <configuration>
+         <excludes>
+           <!-- JCR-1398 Big XLS document hangs document reader -->
+           <exclude>**/TestBigXLSDocumentReader.java</exclude>
+         </excludes>
+        </configuration>
+      </plugin>
+    </plugins>
+    <testResources>
+      <testResource>
+        <directory>src/test/resources</directory>
+        <includes>
+          <include>**/*.properties</include>
+          <include>**/*.xml</include>
+          <include>**/*.drl</include>
+          <include>**/*.vm</include>
+          <include>**/*.doc</include>
+          <include>**/*.dot</include>
+          <include>**/*.xls</include>
+          <include>**/*.ppt</include>
+          <include>**/*.txt</include>
+          <include>**/*.tiff</include>
+          <include>**/*.pdf</include>
+          <include>**/*.odt</include>
+          <include>**/*.html</include>
+          <include>**/*.msg</include>
+          <include>**/*.pst</include>
+        </includes>
+      </testResource>
+    </testResources>
+  </build>
+</project>
Index: component/document/src/main/java/org/exoplatform/services/document/impl/BaseDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/BaseDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/BaseDocumentReader.java	(working copy)
@@ -19,10 +19,35 @@
 import org.exoplatform.container.component.BaseComponentPlugin;
 import org.exoplatform.services.document.DocumentReader;
 
+import java.io.IOException;
+import java.io.InputStream;
+
 /**
  * Created by The eXo Platform SAS Author : Phung Hai Nam phunghainam@gmail.com
  * Oct 20, 2005
  */
 abstract public class BaseDocumentReader extends BaseComponentPlugin implements DocumentReader {
 
+  /**
+   * Validate that stream is not empty and return BufferedInputStream
+   * 
+   * @param is InputeStream
+   * @return BufferedInputStram that covers original IS or null if IS is empty.
+   * @throws IOException
+   */
+  protected boolean isInputStreamValid(InputStream is) throws IOException {
+    if (is == null) {
+      throw new NullPointerException("InputStream is null.");
+    }
+
+    if (is.available() <= 2) {
+      try {
+        is.close();
+      } catch (IOException e) {
+      }
+      return false;
+    } else {
+      return true;
+    }
+  }
 }
Index: component/document/src/main/java/org/exoplatform/services/document/impl/HTMLDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/HTMLDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/HTMLDocumentReader.java	(working copy)
@@ -16,6 +16,11 @@
  */
 package org.exoplatform.services.document.impl;
 
+import org.exoplatform.container.xml.InitParams;
+import org.htmlparser.Parser;
+import org.htmlparser.beans.StringBean;
+import org.htmlparser.util.ParserException;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
@@ -24,12 +29,6 @@
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
-import org.htmlparser.Parser;
-import org.htmlparser.beans.StringBean;
-import org.htmlparser.util.ParserException;
-
-import org.exoplatform.container.xml.InitParams;
-
 /**
  * Created by The eXo Platform SAS A parser of HTML files.
  * 
@@ -66,6 +65,10 @@
    * @return The string only with text from file content.
    */
   public String getContentAsText(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return "";
+    }
+
     String refined_text = new String();
     try {
       byte[] buffer = new byte[2048];
Index: component/document/src/main/java/org/exoplatform/services/document/impl/MSExcelDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/MSExcelDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/MSExcelDocumentReader.java	(working copy)
@@ -16,11 +16,6 @@
  */
 package org.exoplatform.services.document.impl;
 
-import java.io.InputStream;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Properties;
-
 import org.apache.poi.hssf.usermodel.HSSFCell;
 import org.apache.poi.hssf.usermodel.HSSFCellStyle;
 import org.apache.poi.hssf.usermodel.HSSFDateUtil;
@@ -28,6 +23,11 @@
 import org.apache.poi.hssf.usermodel.HSSFSheet;
 import org.apache.poi.hssf.usermodel.HSSFWorkbook;
 
+import java.io.InputStream;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Properties;
+
 /**
  * Created by The eXo Platform SAS A parser of Microsoft Excel files.
  * 
@@ -56,7 +56,10 @@
    * @throws Exception
    */
   public String getContentAsText(InputStream is) throws Exception {
-    
+    if (!isInputStreamValid(is)) {
+      return "";
+    }
+
     StringBuilder builder = new StringBuilder("");
     try {
       HSSFWorkbook wb = new HSSFWorkbook(is);
@@ -121,6 +124,10 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return new Properties();
+    }
+
     POIPropertiesReader reader = new POIPropertiesReader();
     reader.readDCProperties(is);
     return reader.getProperties();
Index: component/document/src/main/java/org/exoplatform/services/document/impl/MSOutlookDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/MSOutlookDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/MSOutlookDocumentReader.java	(working copy)
@@ -17,12 +17,12 @@
 
 package org.exoplatform.services.document.impl;
 
+import org.apache.poi.hsmf.MAPIMessage;
+import org.apache.poi.hsmf.exceptions.ChunkNotFoundException;
+
 import java.io.InputStream;
 import java.util.Properties;
 
-import org.apache.poi.hsmf.MAPIMessage;
-import org.apache.poi.hsmf.exceptions.ChunkNotFoundException;
-
 /**
  * Created by The eXo Platform SAS Author : Sergey Karpenko
  * <sergey.karpenko@exoplatform.com.ua>
@@ -48,6 +48,10 @@
   }
 
   public String getContentAsText(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return "";
+    }
+
     try {
       MAPIMessage message = new MAPIMessage(is);
       StringBuffer buffer = new StringBuffer();
@@ -82,7 +86,7 @@
   }
 
   public Properties getProperties(InputStream is) throws Exception {
-    return null;
+    return new Properties();
   }
 
 }
Index: component/document/src/main/java/org/exoplatform/services/document/impl/MSWordDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/MSWordDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/MSWordDocumentReader.java	(working copy)
@@ -16,13 +16,13 @@
  */
 package org.exoplatform.services.document.impl;
 
+import org.apache.poi.hwpf.HWPFDocument;
+import org.apache.poi.hwpf.usermodel.Range;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.Properties;
 
-import org.apache.poi.hwpf.HWPFDocument;
-import org.apache.poi.hwpf.usermodel.Range;
-
 /**
  * Created by The eXo Platform SAS A parser of Microsoft Word files.
  * 
@@ -49,6 +49,10 @@
    * @throws Exception
    */
   public String getContentAsText(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return "";
+    }
+
     String text = "";
     try {
       HWPFDocument doc = new HWPFDocument(is);
@@ -73,6 +77,10 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return new Properties();
+    }
+
     POIPropertiesReader reader = new POIPropertiesReader();
     reader.readDCProperties(is);
     return reader.getProperties();
Index: component/document/src/main/java/org/exoplatform/services/document/impl/OpenOfficeDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/OpenOfficeDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/OpenOfficeDocumentReader.java	(working copy)
@@ -17,6 +17,14 @@
 
 package org.exoplatform.services.document.impl;
 
+import org.exoplatform.commons.utils.QName;
+import org.exoplatform.services.document.DCMetaData;
+import org.xml.sax.Attributes;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLReader;
+import org.xml.sax.helpers.DefaultHandler;
+
 import java.io.InputStream;
 import java.util.Properties;
 import java.util.zip.ZipEntry;
@@ -25,15 +33,6 @@
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
 
-import org.xml.sax.Attributes;
-import org.xml.sax.InputSource;
-import org.xml.sax.SAXException;
-import org.xml.sax.XMLReader;
-import org.xml.sax.helpers.DefaultHandler;
-
-import org.exoplatform.commons.utils.QName;
-import org.exoplatform.services.document.DCMetaData;
-
 /**
  * Created by The eXo Platform SAS .
  * 
@@ -62,6 +61,10 @@
    * io.InputStream)
    */
   public String getContentAsText(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return "";
+    }
+
     try {
       SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
       saxParserFactory.setValidating(false);
@@ -106,6 +109,10 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return new Properties();
+    }
+
     try {
       SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
       saxParserFactory.setValidating(false);
Index: component/document/src/main/java/org/exoplatform/services/document/impl/PDFDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/PDFDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/PDFDocumentReader.java	(working copy)
@@ -16,31 +16,25 @@
  */
 package org.exoplatform.services.document.impl;
 
-import java.io.ByteArrayInputStream;
+import org.apache.commons.logging.Log;
+import org.exoplatform.services.document.DCMetaData;
+import org.exoplatform.services.log.ExoLogger;
+import org.jempbox.xmp.XMPMetadata;
+import org.jempbox.xmp.XMPSchemaBasic;
+import org.jempbox.xmp.XMPSchemaDublinCore;
+import org.pdfbox.exceptions.InvalidPasswordException;
+import org.pdfbox.pdmodel.PDDocument;
+import org.pdfbox.pdmodel.PDDocumentCatalog;
+import org.pdfbox.pdmodel.PDDocumentInformation;
+import org.pdfbox.pdmodel.common.PDMetadata;
+import org.pdfbox.util.PDFTextStripper;
+
 import java.io.InputStream;
 import java.io.StringWriter;
 import java.util.Calendar;
-import java.util.HashMap;
+import java.util.List;
 import java.util.Properties;
 
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-
-import org.pdfbox.pdmodel.PDDocument;
-import org.pdfbox.util.PDFTextStripper;
-import org.w3c.dom.Document;
-import org.w3c.dom.Node;
-import org.w3c.dom.NodeList;
-
-import org.apache.commons.logging.Log;
-
-import org.exoplatform.commons.utils.ISO8601;
-import org.exoplatform.services.document.DCMetaData;
-import org.exoplatform.services.log.ExoLogger;
-
-import com.lowagie.text.pdf.PdfDate;
-import com.lowagie.text.pdf.PdfReader;
-
 /**
  * Created by The eXo Platform SAS A parser of Adobe PDF files.
  * 
@@ -69,6 +63,10 @@
    * @throws Exception
    */
   public String getContentAsText(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return "";
+    }
+
     PDDocument pdDocument = PDDocument.load(is);
     StringWriter sw = new StringWriter();
     try {
@@ -95,159 +93,137 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
-
-    Properties props = null;
-
-    PdfReader reader = new PdfReader(is, "".getBytes());
-
-    // Read the file metadata
-    byte[] metadata = reader.getMetadata();
-
-    if (metadata != null) {
-      // there is XMP metadata try exctract it
-      props = getPropertiesFromMetadata(metadata);
+    if (!isInputStreamValid(is)) {
+      return new Properties();
     }
 
-    if (props == null) {
-      // it's old pdf document version
-      props = getPropertiesFromInfo(reader.getInfo());
-    }
-    reader.close();
-    return props;
-  }
-
-  /**
-   * Extract properties from XMP xml.
-   * 
-   * @param metadata XML as byte array
-   * @return extracted properties
-   * @throws Exception if extracting fails
-   */
-  protected Properties getPropertiesFromMetadata(byte[] metadata) throws Exception {
-
-    Properties props = null;
-
-    // parse xml
-    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
-    DocumentBuilder docBuilder = dbf.newDocumentBuilder();
-    Document doc = docBuilder.parse(new ByteArrayInputStream(metadata));
-
-    // Check is there PDF/A-1 XMP
-    String version = "";
-    NodeList list = doc.getElementsByTagName("pdfaid:conformance");
-    if (list != null && list.item(0) != null) {
-      version += list.item(0).getTextContent() + "-";
-    }
-
-    list = doc.getElementsByTagName("pdfaid:part");
-    if (list != null && list.item(0) != null) {
-      version += list.item(0).getTextContent();
-    }
-
-    // PDF/A-1a or PDF/A-1b
-    if (version.equalsIgnoreCase("A-1")) {
-      props = getPropsFromPDFAMetadata(doc);
-    }
-
-    return props;
-  }
-
-  /**
-   * Extracts properties from PDF Info hash set.
-   * 
-   * @param Pdf Info hash set
-   * @return Extracted properties
-   * @throws Exception if extracting fails
-   */
-  protected Properties getPropertiesFromInfo(HashMap info) throws Exception {
+    PDDocument pdDocument = PDDocument.load(is);
     Properties props = new Properties();
+    try {
+      if (pdDocument.isEncrypted()) {
+        try {
+          pdDocument.decrypt("");
+        } catch (InvalidPasswordException e) {
+          throw new Exception("The pdf document is encrypted.");
+        } catch (org.pdfbox.exceptions.CryptographyException e) {
+          throw e;
+        }
+      }
 
-    String title = (String) info.get("Title");
-    if (title != null) {
-      props.put(DCMetaData.TITLE, title);
-    }
+      PDDocumentCatalog catalog = pdDocument.getDocumentCatalog();
+      PDMetadata meta = catalog.getMetadata();
+      if (meta != null) {
+        XMPMetadata metadata = XMPMetadata.load(meta.createInputStream());
 
-    String author = (String) info.get("Author");
-    if (author != null) {
-      props.put(DCMetaData.CREATOR, author);
-    }
+        XMPSchemaDublinCore dc = metadata.getDublinCoreSchema();
+        if (dc != null) {
+          try {
+            if (dc.getTitle() != null)
+              props.put(DCMetaData.TITLE, dc.getTitle());
+          } catch (Exception e) {
+            log.warn("getTitle failed: " + e);
+          }
+          try {
+            if (dc.getDescription() != null)
+              props.put(DCMetaData.SUBJECT, dc.getDescription());
+          } catch (Exception e) {
+            log.warn("getSubject failed: " + e);
+          }
 
-    String subject = (String) info.get("Subject");
-    if (subject != null) {
-      props.put(DCMetaData.SUBJECT, subject);
-    }
+          try {
+            if (dc.getCreators() != null) {
+              List<String> list = dc.getCreators();
+              for (String creator : list) {
+                props.put(DCMetaData.CREATOR, creator);
+              }
+            }
+          } catch (Exception e) {
+            log.warn("getCreator failed: " + e);
+          }
 
-    /*
-     * String publisher = (String) info.get("Producer"); if (publisher != null)
-     * { props.put(DCMetaData.PUBLISHER, publisher); } String description =
-     * (String) info.get("Desc"); if (description != null) {
-     * props.put(DCMetaData.DESCRIPTION, description); }
-     */
+          try {
+            if (dc.getDates() != null) {
+              List<Calendar> list = dc.getDates();
 
-    String creationDate = (String) info.get("CreationDate");
-    if (creationDate != null) {
-      props.put(DCMetaData.DATE, PdfDate.decode(creationDate));
-    }
+              for (Calendar date : list) {
+                props.put(DCMetaData.DATE, date);
+              }
+            }
+          } catch (Exception e) {
+            log.warn("getDate failed: " + e);
+          }
+        }
 
-    String modDate = (String) info.get("ModDate");
-    if (modDate != null) {
-      props.put(DCMetaData.DATE, PdfDate.decode(modDate));
-    }
+        XMPSchemaBasic basic = metadata.getBasicSchema();
+        if (basic != null) {
+          try {
+            if (basic.getCreateDate() != null)
+              props.put(DCMetaData.DATE, basic.getCreateDate());
+          } catch (Exception e) {
+            log.warn("getCreationDate failed: " + e);
+          }
+          try {
+            if (basic.getModifyDate() != null)
+              props.put(DCMetaData.DATE, basic.getModifyDate());
+          } catch (Exception e) {
+            log.warn("getModificationDate failed: " + e);
+          }
+        }
+      }
 
-    return props;
-  }
+      if (props.isEmpty()) {
+        // The pdf doesn't contain any metadata or metadata do not contains any
+        // usefull data, try to use the document
+        // information instead
+        PDDocumentInformation docInfo = pdDocument.getDocumentInformation();
 
-  private Properties getPropsFromPDFAMetadata(Document doc) throws Exception {
-    Properties props = new Properties();
-    // get properties
-    NodeList list = doc.getElementsByTagName("rdf:li");
-    if (list != null && list.getLength() > 0) {
-      for (int i = 0; i < list.getLength(); i++) {
+        if (docInfo != null) {
+          try {
+            if (docInfo.getCreationDate() != null)
+              props.put(DCMetaData.DATE, docInfo.getCreationDate());
+          } catch (Exception e) {
+            log.warn("getCreationDate failed: " + e);
+          }
+          try {
+            if (docInfo.getCreator() != null)
+              props.put(DCMetaData.CREATOR, docInfo.getCreator());
+          } catch (Exception e) {
+            log.warn("getCreator failed: " + e);
+          }
+          try {
 
-        Node n = list.item(i);
-        // dc:title - TITLE
-        if (n.getParentNode().getParentNode().getNodeName().equals("dc:title")) {
-          String title = n.getLastChild().getTextContent();
-          props.put(DCMetaData.TITLE, title);
+            if (docInfo.getKeywords() != null)
+              props.put(DCMetaData.SUBJECT, docInfo.getKeywords());
+          } catch (Exception e) {
+            log.warn("getKeywords failed: " + e);
+          }
+          try {
+            if (docInfo.getModificationDate() != null)
+              props.put(DCMetaData.DATE, docInfo.getModificationDate());
+          } catch (Exception e) {
+            log.warn("getModificationDate failed: " + e);
+          }
+          try {
+            if (docInfo.getSubject() != null)
+              props.put(DCMetaData.DESCRIPTION, docInfo.getSubject());
+          } catch (Exception e) {
+            log.warn("getSubject failed: " + e);
+          }
+          try {
+            if (docInfo.getTitle() != null)
+              props.put(DCMetaData.TITLE, docInfo.getTitle());
+          } catch (Exception e) {
+            log.warn("getTitle failed: " + e);
+          }
         }
-
-        // dc:creator - CREATOR
-        if (n.getParentNode().getParentNode().getNodeName().equals("dc:creator")) {
-          String author = n.getLastChild().getTextContent();
-          props.put(DCMetaData.CREATOR, author);
-        }
-
-        // DC:description - SUBJECT
-        if (n.getParentNode().getParentNode().getNodeName().equals("dc:description")) {
-          String description = n.getLastChild().getTextContent();
-          props.put(DCMetaData.SUBJECT, description);
-          // props.put(DCMetaData.DESCRIPTION, description);
-        }
       }
-    }
 
-    // xmp:CreateDate - DATE
-    list = doc.getElementsByTagName("xmp:CreateDate");
-    if (list != null && list.item(0) != null) {
-      Node creationDateNode = list.item(0).getLastChild();
-      if (creationDateNode != null) {
-        String creationDate = creationDateNode.getTextContent();
-        Calendar c = ISO8601.parseEx(creationDate);
-        props.put(DCMetaData.DATE, c);
+    } finally {
+      if (pdDocument != null) {
+        pdDocument.close();
       }
     }
 
-    // xmp:ModifyDate - DATE
-    list = doc.getElementsByTagName("xmp:ModifyDate");
-    if (list != null && list.item(0) != null) {
-      Node modifyDateNode = list.item(0).getLastChild();
-      if (modifyDateNode != null) {
-        String modifyDate = modifyDateNode.getTextContent();
-        Calendar c = ISO8601.parseEx(modifyDate);
-        props.put(DCMetaData.DATE, c);
-      }
-    }
     return props;
   }
-
 }
Index: component/document/src/main/java/org/exoplatform/services/document/impl/PPTDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/PPTDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/PPTDocumentReader.java	(working copy)
@@ -16,11 +16,11 @@
  */
 package org.exoplatform.services.document.impl;
 
+import org.apache.poi.hslf.extractor.PowerPointExtractor;
+
 import java.io.InputStream;
 import java.util.Properties;
 
-import org.apache.poi.hslf.extractor.PowerPointExtractor;
-
 /**
  * Created by The eXo Platform SAS A parser of Microsoft PowerPoint files.
  * Parses the files with application/powerpoint mime type.
@@ -48,6 +48,10 @@
    * @throws Exception
    */
   public String getContentAsText(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return "";
+    }
+
     PowerPointExtractor ppe = new PowerPointExtractor(is);
     return ppe.getText(true, true);
   }
@@ -64,6 +68,10 @@
    * InputStream)
    */
   public Properties getProperties(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return new Properties();
+    }
+
     POIPropertiesReader reader = new POIPropertiesReader();
     reader.readDCProperties(is);
     return reader.getProperties();
Index: component/document/src/main/java/org/exoplatform/services/document/impl/XMLDocumentReader.java
===================================================================
--- component/document/src/main/java/org/exoplatform/services/document/impl/XMLDocumentReader.java	(revision 65754)
+++ component/document/src/main/java/org/exoplatform/services/document/impl/XMLDocumentReader.java	(working copy)
@@ -54,6 +54,10 @@
    * @return The string only with text from file content.
    */
   public String getContentAsText(InputStream is) throws Exception {
+    if (!isInputStreamValid(is)) {
+      return "";
+    }
+
     byte[] buffer = new byte[2048];
     int len;
     ByteArrayOutputStream bos = new ByteArrayOutputStream();
Index: component/document/src/test/java/org/exoplatform/services/document/test/TestPDFDocumentReader.java
===================================================================
--- component/document/src/test/java/org/exoplatform/services/document/test/TestPDFDocumentReader.java	(revision 65754)
+++ component/document/src/test/java/org/exoplatform/services/document/test/TestPDFDocumentReader.java	(working copy)
@@ -17,12 +17,12 @@
 
 package org.exoplatform.services.document.test;
 
-import java.io.InputStream;
-
 import org.exoplatform.container.PortalContainer;
 import org.exoplatform.services.document.DocumentReaderService;
 import org.exoplatform.test.BasicTestCase;
 
+import java.io.InputStream;
+
 /**
  * Created by The eXo Platform SAS Author : Sergey Karpenko
  * <sergey.karpenko@exoplatform.com.ua>
@@ -41,9 +41,37 @@
   public void testGetContentAsString() throws Exception {
     InputStream is = TestPDFDocumentReader.class.getResourceAsStream("/test.pdf");
     String text = service_.getDocumentReader("application/pdf").getContentAsText(is);
-    String etalon = "Hello\nThis is my first Cocoon page!\npage 1 \n";
+    String expected = "Hello This is my first Cocoon page! page 1";
 
-    System.out.println("[" + text + "]");
-    // assertEquals("Wrong string returned",etalon ,text );
+    assertEquals("Wrong string returned",
+                 normalizeWhitespaces(expected),
+                 normalizeWhitespaces(text));
   }
+
+  public void testGetContentAsStringMetro() throws Exception {
+    InputStream is = TestPDFDocumentReader.class.getResourceAsStream("/Metro.pdf");
+    // there must be no exception Porte de Paris
+    String text = service_.getDocumentReader("application/pdf").getContentAsText(is);
+    assertTrue("Wrong string returned", normalizeWhitespaces(text).contains("Porte de Paris"));
+  }
+
+  public void testGetContentAsStringBrokenFile() throws Exception {
+    InputStream is = TestPDFDocumentReader.class.getResourceAsStream("/pfs_accapp.pdf");
+    // there must be no exception Qhnaod hnik
+    String text = service_.getDocumentReader("application/pdf").getContentAsText(is);
+    assertTrue("Wrong string returned", normalizeWhitespaces(text).contains("Qhnaod hnik"));
+  }
+
+  public void testGetContentAsStringMyTest() throws Exception {
+    InputStream is = TestPDFDocumentReader.class.getResourceAsStream("/MyTest.pdf");
+    // there must be no exception
+    String text = service_.getDocumentReader("application/pdf").getContentAsText(is);
+    assertEquals("Wrong string returned", "", normalizeWhitespaces(text));
+  }
+
+  public String normalizeWhitespaces(String str) {
+    str = str.trim();
+    str = str.replaceAll("\\s+", " ");
+    return str;
+  }
 }
Index: component/document/src/test/java/org/exoplatform/services/document/test/TestPropertiesExtracting.java
===================================================================
--- component/document/src/test/java/org/exoplatform/services/document/test/TestPropertiesExtracting.java	(revision 65754)
+++ component/document/src/test/java/org/exoplatform/services/document/test/TestPropertiesExtracting.java	(working copy)
@@ -16,20 +16,18 @@
  */
 package org.exoplatform.services.document.test;
 
-import java.io.InputStream;
-import java.util.Calendar;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Properties;
-
 import junit.framework.TestCase;
 
-import org.exoplatform.commons.utils.ISO8601;
 import org.exoplatform.container.PortalContainer;
 import org.exoplatform.services.document.DCMetaData;
 import org.exoplatform.services.document.DocumentReader;
 import org.exoplatform.services.document.DocumentReaderService;
 
+import java.io.InputStream;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+
 public class TestPropertiesExtracting extends TestCase {
 
   DocumentReaderService service_;
@@ -47,7 +45,11 @@
     InputStream is = TestPropertiesExtracting.class.getResourceAsStream("/test.pdf");
     DocumentReader rdr = service_.getDocumentReader("application/pdf");
     Properties props = rdr.getProperties(is);
-    printProps(props);
+    assertTrue(props.isEmpty());
+
+    // Properties etalon = new Properties();
+    // etalon.put(DCMetaData.PUBLISHER, "FOP 0.20.4");
+    // evalProps(etalon, props, false);
   }
 
   public void testPDFDocumentReaderServiceXMPMetadata() throws Exception {
@@ -55,19 +57,48 @@
     DocumentReader rdr = service_.getDocumentReader("application/pdf");
 
     Properties testprops = rdr.getProperties(is);
-    printProps(testprops);
+    // printProps(testprops);
 
     Properties etalon = new Properties();
     etalon.put(DCMetaData.TITLE, "Test de convertion de fichier tif");
     etalon.put(DCMetaData.CREATOR, "Christian Klaus");
     etalon.put(DCMetaData.SUBJECT, "20080901 TEST Christian Etat OK");
-    Calendar c = ISO8601.parseEx("2008-09-01T08:01:10+00:00");
-    ;
-    etalon.put(DCMetaData.DATE, c);
+    // Calendar c = ISO8601.parseEx("2008-09-01T08:01:10+00:00");
+    // etalon.put(DCMetaData.DATE, c);
 
-    evalProps(etalon, testprops);
+    evalProps(etalon, testprops, false);
   }
 
+  public void testPDFDocumentReaderServiceBrokenFile() throws Exception {
+    InputStream is = TestPropertiesExtracting.class.getResourceAsStream("/pfs_accapp.pdf");
+    try {
+
+      DocumentReader rdr = service_.getDocumentReader("application/pdf");
+      Properties testprops = rdr.getProperties(is);
+      Properties etalon = new Properties();
+      etalon.put(DCMetaData.TITLE, "Personal Account Opening Form VN");
+      etalon.put(DCMetaData.CREATOR, "mr");
+      evalProps(etalon, testprops, false);
+    } finally {
+      is.close();
+    }
+  }
+
+  public void testPDFDocumentReaderServiceMetro() throws Exception {
+    InputStream is = TestPropertiesExtracting.class.getResourceAsStream("/metro.pdf");
+    try {
+
+      DocumentReader rdr = service_.getDocumentReader("application/pdf");
+      Properties testprops = rdr.getProperties(is);
+      Properties etalon = new Properties();
+      etalon.put(DCMetaData.TITLE, "metro");
+      etalon.put(DCMetaData.CREATOR, "Preview");
+      evalProps(etalon, testprops, false);
+    } finally {
+      is.close();
+    }
+  }
+
   public void testWordDocumentReaderService() throws Exception {
     InputStream is = TestPropertiesExtracting.class.getResourceAsStream("/test.doc");
     Properties props = service_.getDocumentReader("application/msword").getProperties(is);
@@ -102,7 +133,7 @@
     }
   }
 
-  private void evalProps(Properties etalon, Properties testedProps) {
+  private void evalProps(Properties etalon, Properties testedProps, boolean testSize) {
     Iterator it = etalon.entrySet().iterator();
     while (it.hasNext()) {
       Map.Entry prop = (Map.Entry) it.next();
@@ -110,7 +141,9 @@
       assertNotNull(prop.getKey() + " property not founded. ", tval);
       assertEquals(prop.getKey() + " property value is incorrect", prop.getValue(), tval);
     }
-    assertEquals("size is incorrect", etalon.size(), testedProps.size());
+    if (testSize) {
+      assertEquals("size is incorrect", etalon.size(), testedProps.size());
+    }
   }
 
 }
Index: component/document/src/test/resources/metro.pdf
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: component\document\src\test\resources\metro.pdf
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: component/document/src/test/resources/pfs_accapp.pdf
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: component\document\src\test\resources\pfs_accapp.pdf
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream

Index: packaging/module/src/main/javascript/core.packaging.module.js
===================================================================
--- packaging/module/src/main/javascript/core.packaging.module.js	(revision 65754)
+++ packaging/module/src/main/javascript/core.packaging.module.js	(working copy)
@@ -32,6 +32,7 @@
     new Project("org.exoplatform.core", "exo.core.component.document", "jar", module.version).
     addDependency(new Project("pdfbox", "pdfbox", "jar", "0.7.2")).
     addDependency(new Project("com.lowagie", "itext", "jar", "2.1.0")).
+    addDependency(new Project("org.jempbox", "jempbox", "jar", "0.2.0")).
     addDependency(new Project("bouncycastle", "bcmail-jdk14", "jar", "136")).
     addDependency(new Project("bouncycastle", "bcprov-jdk14", "jar", "136")).
     addDependency(new Project("html-parser", "html-parser", "jar", "1.6")).
@@ -56,7 +57,7 @@
     new Project("org.exoplatform.core", "exo.core.component.resources.api", "jar", module.version).
     addDependency(new Project("org.exoplatform.core", "exo.core.component.gifbackport", "jar", module.version)).
     addDependency(new Project("org.exoplatform.core", "exo.core.component.database", "jar", module.version));
-
+
   module.component.gifbackport = 
     new Project("org.exoplatform.core", "exo.core.component.gifbackport", "jar", module.version);
   
